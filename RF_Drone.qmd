---
title: "RF_Vona"
author: "Simon Oiry"
format: 
  docx:
    reference-doc: Word_Template.docx
editor: visual
fig-dpi: 300
---

```{r library}
#| cache: true
#| echo: false
#| warning: false
#| eval: true

library(rstudioapi)
library(raster)
library(sf)
library(stars)
library(terra)
library(tidyverse)
library(Utilities.Package)
library(RStoolbox)
library(ggdist)
library(tidymodels)
library(vetiver)
library(vip)
library(flextable)


```

```{r image opening}
#| cache: true
#| echo: false
#| warning: false
#| eval: true

img_path<-list.files("Data/Drone/img",pattern = ".tif",recursive = T, full.names = T,include.dirs = T)
shp_path<-list.files("Data/Drone/shp",pattern = ".shp",recursive = T, full.names = T)

tide<-img_path %>% 
 gsub(".*/","",.) %>% 
  substr(1,2)
date<-img_path %>% 
 gsub(".*/","",.) %>% 
  substr(4,13) %>% 
  gsub("-","",.)

img_df<-data.frame(path = img_path,
                   tide = tide,
                   date = date)

shpRF<-st_read(shp_path[which(str_detect(shp_path,"trainingROI"))])

bandswv<-c("475","560","668","717","842")

bandname<-c("blue","green","red","RedEdge","NIR")

wavelength_drone_cam<-data.frame(wv = bandswv,
                                 Band_ID = bandname)

```

```{r Train Random Forest}
#| cache: true
#| echo: false
#| warning: false
#| eval: true

answer_index<-askYesNo("Would you like to compute all possible indices ?") 


if (answer_index == FALSE) {
indices_list<-c("NDVI","SAVI","NDWI")
}

for (i in 1:nrow(img_df)) {
  
  rf_class_img<-shpRF[which(shpRF$Image == img_df$tide[i]),]
  stk<-stack(img_df$path[i])
  
  names(stk)<-bandname
  if (answer_index == F) {
      indices_stk<-spectralIndices(stk,
    blue = "blue",
    green = "green",
    red = "red",
    nir = "NIR",
    redEdge1 = "RedEdge",
    indices = indices_list)
  }else{
    indices_stk<-spectralIndices(stk,
    blue = "blue",
    green = "green",
    red = "red",
    nir = "NIR",
    redEdge1 = "RedEdge")
  }

  
  stk<-stack(stk,indices_stk)
  #### Rasterize shp to tif
  
  img_class<-stk[[1]]
  values(img_class)<-0
  
  for (ii in 1:length(unique(rf_class_img$Class))) {
  shp_mask<-rf_class_img[which(rf_class_img$Class==unique(rf_class_img$Class)[ii]),]
  mask_class<-rasterize(shp_mask,img_class,background = 0)
    mask_class<-reclassify(mask_class, c(0,Inf,as.numeric(unique(rf_class_img$Class)[ii])))
    # mask_class[is.na(mask_class[])] <- 0 
    
    if (ii == 1) {
      training_img<-img_class
    }
      training_img<-training_img+mask_class
  }
  
 stk<-stack(stk,training_img)
 names(stk)<-c(names(stk)[-length(names(stk))],"Class")
 
 
 
 temp_stk_df<-stk %>%
  as.data.frame() %>%
  filter(Class != 0) %>%
  # dplyr::filter(W_NDVI>0,
  #               S_NDVI>0) %>%
  mutate(Class = as.factor(Class))
 
 if (i == 1) {
   stk_df<-temp_stk_df
 }else{
   stk_df<-rbind(stk_df,temp_stk_df)
 }
}


stk_df<-stk_df[complete.cases(stk_df),]

### c'est ici qu'il faut selectionner les colonnes a garder ou a enlever

split_RF<-initial_split(stk_df,strata = Class)

train_RF<-training(split_RF)
test_RF<-testing(split_RF)

rf_recipe<-recipe(Class ~.,data = train_RF) %>% 
  step_zv(all_predictors()) %>% 
  step_center(all_predictors(),-all_outcomes()) %>% 
  step_scale(all_predictors(),-all_outcomes())

cores <- parallel::detectCores()

rf_mod <-rand_forest(mtry = sqrt(ncol(stk_df)-1),
            trees = 500,
            min_n = 10) %>%
  set_mode("classification") %>%
  set_engine("ranger", num.threads = cores)

rf_workflow <- 
  workflow() %>% 
  add_model(rf_mod) %>% 
  add_recipe(rf_recipe) 



#### Variable Importance 1

vi_model<-rf_mod %>%
   set_engine("ranger",num.threads = cores,importance = "permutation") %>%
   fit(Class ~.,
       data = train_RF) %>%
   vi()

  vi_model %>%
    ggplot(aes(x=Variable,y=Importance))+
  geom_col()
  
  
 if (askYesNo("Es tu content avec ce model ?")) {
   
   rf_filted<-rf_workflow %>% 
     fit(data = stk_df)
 }

```

```{r accuracy assessment and confusion matrix}
#| cache: true
#| echo: false
#| warning: false
#| eval: true

pckg_check()
CSVlist<-list.files(pattern = ".csv",recursive = T)
ClassID<-read.csv2(CSVlist[which(str_detect(CSVlist,"ClassID"))]) %>% 
  mutate(ID_fct=as.factor(ID)) %>% 
  mutate(ID_chr=as.character(ID))

 ##### variable importance assessment
model_result<-as_tibble(test_RF) %>% 
  dplyr::select(Class) %>% 
  dplyr::rename(Truth = Class) %>%
  bind_cols(rf_filted %>% 
                          predict(new_data = as.tibble(test_RF))) %>% 
  bind_cols(rf_filted %>% 
              predict(new_data = as.tibble(test_RF), type = "prob")) %>% 
  left_join(ClassID, by = c("Truth"="ID_fct")) %>%                          ###########
  dplyr::select(-Truth,-ID) %>%
  rename(Truth = Class) %>%
  left_join(ClassID, by = c(".pred_class"="ID_fct")) %>%
  dplyr::select(-ID,-.pred_class) %>%
  rename(.pred_class = Class) %>%
  mutate(Truth = as.factor(Truth),.pred_class=as.factor(.pred_class))


brdr <- fp_border_default(color = "black", width = 1.5)

conf_matrix<-model_result %>% 
  conf_mat(Truth, .pred_class) %>% 
    tidy() %>% 
  separate(name,into = c("cell","row","col")) %>% 
  left_join(ClassID, by = c("row"="ID_chr")) %>%
  dplyr::select(-row,-ID,-ID_fct) %>%
  rename(row = Class) %>%
  left_join(ClassID, by = c("col"="ID_chr")) %>%
  dplyr::select(-ID,-col,-ID_fct) %>%
  rename(col = Class) %>% 
  pivot_wider(names_from = "col", values_from = "value") %>% 
  dplyr::select(-cell)

conf_matrix<-cbind(rep("Prediction",nrow(conf_matrix)),conf_matrix) %>% 
  rename(name = 'rep("Prediction", nrow(conf_matrix))')

flextable(conf_matrix) %>%
  rotate(j=1,rotation="btlr") %>%
  merge_v(j = 1) %>% 
  set_header_labels(name = "", row = " ") %>% 
  add_header_row(values = rep("Truth",ncol(conf_matrix))) %>%
  merge_h(part = "header") %>%
    border_remove() %>% 
    hline_top(j = 2:ncol(conf_matrix),border=brdr) %>% 
    vline(j=2,border=brdr) %>% 
    align(align = "center",part = "all")

```

```{r Predict RF}

for (i in 1:nrow(img_df)) {
  
  stk<-stack(img_df$path[i])
    
    names(stk)<-bandname
    if (answer_index == F) {
        indices_stk<-spectralIndices(stk,
      blue = "blue",
      green = "green",
      red = "red",
      nir = "NIR",
      redEdge1 = "RedEdge",
      indices = indices_list)
    }else{
      indices_stk<-spectralIndices(stk,
      blue = "blue",
      green = "green",
      red = "red",
      nir = "NIR",
      redEdge1 = "RedEdge")
    }

  
  img<-stack(stk,indices_stk) %>% 
    as.data.frame(xy = TRUE)
  
  img<-img[complete.cases(img), ]
  
  coord<-img %>%
  dplyr::select(c(x,y))
  
  img_no_coord<-img %>% 
   dplyr::select(!c(x,y))
  
  rf_rslt<-predict(rf_filted,img_no_coord,type = "class")
  
  output_df<-coord %>% 
    cbind(rf_rslt$.pred_class) %>% 
    st_as_sf(coords = c("x", "y")) %>%
    filter(!is.na(`rf_rslt$.pred_class`)) %>%
    dplyr::group_by(`rf_rslt$.pred_class`) %>%
    summarise(geometry = st_union(geometry))
  
  rf_raster_out<-st_rasterize(output_df)
  st_crs(rf_raster_out)<-st_crs(img)
  
  output_name<-paste0("Output/RF/Drone/",gsub(".tif","",gsub(".*/","",img_df$path[i])),"_",format(Sys.time(),"%d%m%Y_%H%M"),".tif")
  

  write_stars(rf_raster_out,output_name)
  
  
}




```
